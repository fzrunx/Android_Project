package com.example.android_project.main

import android.net.Uri
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.grid.rememberLazyGridState
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextOverflow
import coil.compose.AsyncImage
import com.example.android_project.cart.CartViewModel
import com.example.android_project.shopping.ShoppingViewModel
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(navController: NavController, modifier: Modifier = Modifier, viewModel: ShoppingViewModel = viewModel(), cartViewModel: CartViewModel = viewModel()) {
    val context = LocalContext.current
    val shopping by viewModel.shoppingList.collectAsState()
    val searchKeyword by viewModel.searchKeyword.collectAsState()
    val currentPageItems = viewModel.currentPageItems // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÏïÑÏù¥ÌÖú
    val gridState = rememberLazyGridState() // Grid ÏÉÅÌÉú
    val coroutineScope = rememberCoroutineScope() // CoroutineScope

    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(title = {
                Text(
                    "ÏáºÌïëÎ™∞",
                    style = MaterialTheme.typography.titleLarge
                )
            })
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .padding(
                    start = 8.dp,
                    end = 8.dp,
                    top = padding.calculateTopPadding(),       // TopAppBarÏôÄ Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù
                    bottom = padding.calculateBottomPadding()  // BottomAppBarÏôÄ Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù
                )
        ) {
            // Í≤ÄÏÉâÏ∞Ω
            OutlinedTextField(
                value = searchKeyword,
                onValueChange = { viewModel.setSearchKeyword(it) }, // ‚úÖ ViewModelÏóê ÏÉÅÌÉú Ï†ÄÏû•
                label = { Text("Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
            )

            // Í≤ÄÏÉâ Î≤ÑÌäº
            Button(
                onClick = {
                    if (searchKeyword.isNotBlank()) {
                        viewModel.fetchShopping(searchKeyword)
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 8.dp)
            ) {
                Text("Í≤ÄÏÉâ")
            }
            LazyVerticalGrid(
                columns = GridCells.Fixed(2),// Ìïú Ï§ÑÏóê 2Í∞úÏî©
                state = gridState,
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f), // üí° Ïó¨Í∏∞Í∞Ä ÌïµÏã¨: GridÍ∞Ä ÎÇ®Îäî Í≥µÍ∞ÑÎßå Ï∞®ÏßÄÌïòÎèÑÎ°ù
                contentPadding = PaddingValues(
                    top = 4.dp,
                    bottom = 0.dp
                )// Ïó¨Í∏∞ÏÑú 0ÏúºÎ°ú ÌïòÎ©¥ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≤ÑÌäºÍ≥º BottomAppBar ÏÇ¨Ïù¥ Í≥µÍ∞Ñ ÏµúÏÜåÌôî
            ) {
                items(currentPageItems, key = { it.link }) { item ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(8.dp)
                            .aspectRatio(0.666f) // Í∞ÄÎ°ú:ÏÑ∏Î°ú = 1:1.5
                            .clickable {
                                val encodedUrl = Uri.encode(item.link) // ÌäπÏàòÎ¨∏Ïûê Ï≤òÎ¶¨
                                navController.navigate("webview/$encodedUrl")
                            }
                    ) {
                        Column(modifier = Modifier.padding(8.dp)) {
                            val cleanTitle = item.title.replace(Regex("<.*?>"), "")
                            Text(                          // HTML ÌÉúÍ∑∏ Ï†úÍ±∞
                                text = cleanTitle,
                                style = MaterialTheme.typography.bodyMedium,
                                maxLines = 4,                 // ÏµúÎåÄ 4Ï§Ñ
                                overflow = TextOverflow.Ellipsis
                            )// Í∏ÄÏûê ÏûòÎ¶ºÏãú ... Ï≤òÎ¶¨

                            // Ïù¥ÎØ∏ÏßÄ ÌëúÏãú
                            AsyncImage(
                                model = item.image,          // Ïù¥ÎØ∏ÏßÄ URL
                                contentDescription = item.title,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 4.dp)
                                    .weight(1f) // Ïù¥ÎØ∏ÏßÄÍ∞Ä Ïπ¥Îìú ÏïàÏóêÏÑú Í≥µÍ∞ÑÏùÑ Í∑†Îì±ÌïòÍ≤å Ï∞®ÏßÄ
                            )
                            Button(
                                onClick = { cartViewModel.addToCart(item, searchKeyword) },
                                modifier = Modifier.align(Alignment.CenterHorizontally)
                            ) {
                                Text("Ïû•Î∞îÍµ¨Îãà Ï∂îÍ∞Ä")
                            }
                        }

                    }
                }
            }
            // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≤ÑÌäº
            if (currentPageItems.isNotEmpty()) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp), // ÏúÑÏïÑÎûò Ïó¨Î∞± ÏµúÏÜåÌôî
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Button(
                            onClick = {
                                viewModel.prevPage()
                                coroutineScope.launch {
                                    gridState.scrollToItem(0)
                                }
                            },
                            enabled = viewModel.currentPage > 0,
                            contentPadding = PaddingValues(
                                horizontal = 12.dp,
                                vertical = 4.dp
                            ) // Î≤ÑÌäº ÏïàÏ™Ω Ïó¨Î∞± Ï°∞Ï†à
                        ) {
                            Text("Ïù¥Ï†Ñ")
                        }

                        Text(
                            text = if (shopping.isEmpty()) "0/0" else "${viewModel.currentPage + 1} / ${viewModel.totalPages()}",
                            modifier = Modifier.padding(horizontal = 12.dp)
                        )

                        Button(
                            onClick = {
                                viewModel.nextPage()
                                coroutineScope.launch {
                                    gridState.scrollToItem(0)
                                }
                            },
                            enabled = viewModel.currentPage < viewModel.totalPages() - 1,
                            contentPadding = PaddingValues(horizontal = 12.dp, vertical = 4.dp)
                        ) {
                            Text("Îã§Ïùå")
                        }
                    }
                }
            }
        }
    }
}